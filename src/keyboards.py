from telethon.tl.types import *
from telethon.tl.custom import *
from src.users import *


async def make_main_redirect_buttons(taskId):
    """
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è —Å USERSIDE
    :return: –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ USERSIDE
    """
    redirect_buttons = []
    k = 0
    for id in main_divisions:
        division = main_divisions[id]
        if not k:
            redirect_buttons.append([Button.inline(division.name, f'redirect={division.id}={taskId}')])
        else:
            redirect_buttons[-1].append(Button.inline(division.name, f'redirect={division.id}={taskId}'))
        k = (k + 1) % 1
    redirect_buttons.append([Button.inline('–ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏', f'show={taskId}=3')])
    redirect_buttons.append([Button.inline('‚¨ÜÔ∏è–°–≤–µ—Ä–Ω—É—Ç—å', f'show={taskId}=2')])
    return redirect_buttons


async def make_sub_redirect_buttons(parentId, taskId):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :return: –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    """
    redirect_buttons = []
    k = 0
    for id in sub_divisions[parentId]:
        division = sub_divisions[parentId][id]
        if not k:
            redirect_buttons.append([Button.inline(division.name, f'redirect={parentId}={division.id}={taskId}')])
        else:
            redirect_buttons[-1].append(Button.inline(division.name, f'redirect={parentId}={division.id}={taskId}'))
        k = (k + 1) % 1
    redirect_buttons.append([Button.inline('–ù–∞–∑–∞–¥üîº', f'redirect={taskId}')])
    return redirect_buttons


async def make_division_redirect_buttons(taskId):
    """
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :return: –∫–Ω–æ–ø–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞: –≤ –¥—Ä—É–≥–æ–π –æ—Ç–¥–µ–ª/–Ω–∞ –≤—ã–µ–∑–¥/–∑–∞–∫—Ä—ã—Ç—å
    """
    executor = get_executors(taskId)
    parentId = all_divisions[executor[0]].parentId
    redirect_buttons = []
    k = 0
    for id in sub_divisions[parentId]:
        division = sub_divisions[parentId][id]
        template = Button.inline(division.name, f'div_redirect={parentId}={division.id}={taskId}=1')
        if not k:
            redirect_buttons.append([template])
        else:
            redirect_buttons[-1].append(template)
        k = (k + 1) % 1
    redirect_buttons.append([Button.inline('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–µ–∑–¥', f'cal_redirect={parentId}={taskId}')])
    redirect_buttons.append([Button.inline('–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É‚ùé', f'div_redirect={parentId}={executor[0]}={taskId}=0')])
    return redirect_buttons


async def make_calendar_redirect_buttons(parentId, taskId):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :return: –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–π —Å –ø–æ–º–µ—Ç–∫–æ–π "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
    """
    redirect_buttons = []
    k = 0
    for id in calendar_divisions[parentId]:
        division = calendar_divisions[parentId][id]
        if not k:
            redirect_buttons.append([Button.inline(division.name,
                                                   f'cal_redirect={parentId}={division.id}={taskId}=0')])
        else:
            redirect_buttons[-1].append(Button.inline(division.name,
                                                      f'cal_redirect={parentId}={division.id}={taskId}=0'))
        k = (k + 1) % 1
    redirect_buttons.append([Button.inline('–ù–∞–∑–∞–¥üîº', f'cal_redirect={taskId}')])
    return redirect_buttons


async def make_div_calendar_buttons(parentId, divId, taskId, delta):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param divId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :param delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö —Å —Ç–µ–∫—É—â–∏–º —á–∏—Å–ª–æ–º. –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
    :return: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–µ–∑–¥
    """
    redirect_buttons = []
    k = 0
    result = task_make_calendar((datetime.now() + timedelta(days=delta)).date(), divId)
    for idx in range(10):
        if result[idx]:
            if not k:
                redirect_buttons.append(
                    [Button.inline(f'{idx + 9}:00', f'job={parentId}={divId}={taskId}={delta}={idx + 9}')]
                )
            else:
                redirect_buttons[-1].append(
                    Button.inline(f'{idx + 9}:00', f'job={parentId}={divId}={taskId}={delta}={idx + 9}')
                )
            k = (k + 1) % 3

    redirect_buttons.append([
        Button.inline(f'‚óÄÔ∏è{(datetime.now() + timedelta(days=delta - 1)).date()}',
                      f'cal_redirect={parentId}={divId}={taskId}={delta - 1}'),
        Button.inline(f'‚è∫{(datetime.now() + timedelta(days=delta)).date()}',
                      f'cal_redirect={parentId}={divId}={taskId}={delta}'),
        Button.inline(f'{(datetime.now() + timedelta(days=delta + 1)).date()}‚ñ∂Ô∏è',
                      f'cal_redirect={parentId}={divId}={taskId}={delta + 1}'),
    ])
    redirect_buttons.append([Button.inline('–ù–∞–∑–∞–¥üîº', f'cal_redirect={parentId}={taskId}')])
    return redirect_buttons


async def make_job_calendar_buttons(parentId, divId, taskId, delta, time):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param divId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :param delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö —Å —Ç–µ–∫—É—â–∏–º —á–∏—Å–ª–æ–º. –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
    :param time: —á–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç –æ—Ç 9 –¥–æ 18
    :return: –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–µ–∑–¥
    """
    return [
        [
            Button.inline('–£—Å–ª—É–≥–∏ –§–õ', f'job={parentId}={divId}={taskId}={delta}={time}=0'),
            Button.inline('–£—Å–ª—É–≥–∏ –Æ–õ', f'job={parentId}={divId}={taskId}={delta}={time}=1')
        ],
        [
            Button.inline('–†–µ–º–æ–Ω—Ç—ã –§–õ', f'job={parentId}={divId}={taskId}={delta}={time}=2'),
            Button.inline('–†–µ–º–æ–Ω—Ç—ã –Æ–õ', f'job={parentId}={divId}={taskId}={delta}={time}=3'),
        ],
        [
            Button.inline('–ù–∞–∑–∞–¥üîº', f'cal_redirect={parentId}={divId}={taskId}={delta}')
        ],
    ]


async def make_div_job_calendar_buttons(parentId, divId, taskId, delta, time, idx):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param divId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
    :param taskId: ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ USERSIDE
    :param delta: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö —Å —Ç–µ–∫—É—â–∏–º —á–∏—Å–ª–æ–º. –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
    :param time: —á–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç –æ—Ç 9 –¥–æ 18
    :param idx: ID —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç
    :return: –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–µ–∑–¥
    """
    buttons = []
    if idx == 0:
        buttons = [
            [
                Button.inline('–ò–ù–ï–¢-—Ñ–ª-FTTB (–º–µ–¥—å)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=294'),
                Button.inline('–ö–¢–í-–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=295'),
            ],
            [
                Button.inline('–ò–ù–ï–¢-—Ñ–ª-FTTB (–º–µ–¥—å)+–ö–¢–í',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=296'),
                Button.inline('–ò–ù–ï–¢-–§–õ-–ß–° (opt)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=85'),
            ],
            [
                Button.inline('–ò–ù–ï–¢-—Ñ–ª-FTTH(opt)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=193'),
                Button.inline('–ò–ù–ï–¢-—Ñ–ª-FTTH(opt)+–ö–¢–í(rf)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=321'),
            ],
        ]
    elif idx == 1:
        buttons = [
            [
                Button.inline('–û–±–ª–∞—á–Ω–æ–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=323'),
                Button.inline('–¢–ï–•–í–û–ó–ú–û–ñ–ù–û–°–¢–¨-–û–±–ª–∞—á–Ω–æ–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=311'),
            ],
            [
                Button.inline('–¢–ï–•–í–û–ó–ú–û–ñ–ù–û–°–¢–¨-–ò–ù–ï–¢-—é–ª',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=334'),
                Button.inline('–ò–ù–ï–¢-—é–ª-FTTB (–º–µ–¥—å)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=335'),
            ],
            [
                Button.inline('–ò–ù–ï–¢-—é–ª-FTTH (opt)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=336'),
            ]
        ]
    elif idx == 2:
        buttons = [
            [
                Button.inline('–†–ï–ú–û–ù–¢-–ö–¢–í (–§–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=309'),
                Button.inline('–†–ï–ú–û–ù–¢-–ú–ï–î–¨ (–§–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=300'),
            ],
            [
                Button.inline('–†–ï–ú–û–ù–¢-–û–ü–¢–ò–ö–ê (–§–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=301'),
                Button.inline('–†–ï–ú–û–ù–¢-–¢–ï–•–ù–ò–ö (–§–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=299'),
            ],
            [
                Button.inline('–†–µ–º–æ–Ω—Ç-–æ–±–ª–∞—á–Ω–æ–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ (–§–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=293'),
            ],
        ]
    elif idx == 3:
        buttons = [
            [
                Button.inline('–†–ï–ú–û–ù–¢-–ú–ï–î–¨ (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=302'),
                Button.inline('–†–µ–º–æ–Ω—Ç-–æ–±–ª–∞—á–Ω–æ–µ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=324'),
            ],
            [
                Button.inline('–†–ï–ú–û–ù–¢-–û–ü–¢–ò–ö–ê (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=304'),
                Button.inline('–†–ï–ú–û–ù–¢-–¢–ï–•–ù–ò–ö (–Æ–õ)',
                              f'job={parentId}={divId}={taskId}={delta}={time}={idx}=303'),
            ],
        ]

    buttons.append([
        Button.inline('–ù–∞–∑–∞–¥üîº', f'job={parentId}={divId}={taskId}={delta}={time}')
    ])
    return buttons


async def make_employee_job_buttons(taskId, divId, workers=''):
    buttons = []
    currentWorkers = {int(val) for val in workers.split(',') if val}
    workers = get_division(divId, workers=True)['workers']

    k = 0
    for employeeId in workers:
        name = employee_data(employeeId, short_name=True)['short_name']
        if employeeId in currentWorkers:
            tmp_set = {val for val in currentWorkers}
            tmp_set.discard(employeeId)
            name = '‚úÖ' + name
        else:
            tmp_set = {val for val in currentWorkers}
            tmp_set.add(employeeId)
        template = Button.inline(name, f'employee={taskId}={divId}={",".join(str(val) for val in tmp_set)}')

        if not k:
            buttons.append([template])
        else:
            buttons[-1].append(template)
        k = (k + 1) % 2
    buttons += [
        [
            Button.inline(f'üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                          f'employee={taskId}={divId}={",".join(str(val) for val in currentWorkers)}=1'),
            Button.inline('üî¥–û—Ç–º–µ–Ω–∞', 'stop'),
        ],
    ]
    return buttons


async def make_inventory_buttons():
    """
    :return: –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–∫–ª–∞–¥—É
    """
    redirect_buttons = []
    k = 0
    for id in main_divisions:
        division = main_divisions[id]
        if not k:
            redirect_buttons.append([Button.inline(division.name, f'inventory={id}')])
        else:
            redirect_buttons[-1].append(Button.inline(division.name, f'inventory={id}'))
        k = (k + 1) % 1
    redirect_buttons.append([Button.inline('‚ùå–û—Ç–º–µ–Ω–∞', 'stop')])
    return redirect_buttons


async def make_div_inventory_buttons(parentId):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :return: –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π "(—Å–ø–∏—Å–æ–∫)"
    """
    redirect_buttons = []
    k = 0
    if parentId in inventory_divisions:
        for id in inventory_divisions[parentId]:
            division = inventory_divisions[parentId][id]
            if not k:
                redirect_buttons.append([Button.inline(division.name, f'inventory={parentId}={id}')])
            else:
                redirect_buttons[-1].append(Button.inline(division.name, f'inventory={parentId}={id}'))
            k = (k + 1) % 1
    redirect_buttons.append([Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', 'inventory')])
    return redirect_buttons


async def make_choose_inventory_buttons(parentId, divId):
    """
    :param parentId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    :param divId: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π "(—Å–ø–∏—Å–æ–∫)"
    :return: –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞.
    """
    buttons = [
        [Button.inline('üì¶–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥—É –¢–ú–¶', f'inventory={parentId}={divId}=1')],
        [Button.inline('üì¶–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫—É –¢–ú–¶', f'inventory={parentId}={divId}=2')],
        [Button.inline('–ù–∞–∑–∞–¥‚èèÔ∏è', f'inventory={parentId}')],
    ]
    return buttons


async def make_accept_buttons(taskId):
    return Button.inline('–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é‚ÜóÔ∏è', f'accept={taskId}')


async def make_confirm_accept_buttons(taskId):
    return [Button.inline('‚úÖ', f'confirm={taskId}=1'),
            Button.inline('‚ùå', f'confirm={taskId}=0')]


async def make_show_buttons(taskId):
    return [
        Button.inline('–ü–µ—Ä–µ—Å–ª–∞—Ç—å', f'show={taskId}=1'),
        Button.inline('–£–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', f'show={taskId}=3')
    ]


async def make_comments_keyboard(start_idx):
    """
    –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä `size` –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ 1–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :param start_idx: –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∏–ø–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    """
    start_idx = start_idx if start_idx >= 0 else 0
    size = 5
    last_idx = start_idx + size if start_idx + size <= len(comments) else len(comments)

    keyboard = []
    k = 0
    for idx in range(start_idx, last_idx):
        if not k:
            keyboard.append([Button.text(comments[idx], resize=True)])
        else:
            keyboard[-1].append(Button.text(comments[idx], resize=True))
        k = (k + 1) % 2

    if start_idx == 0:
        keyboard.append([Button.text(f'‚û°Ô∏è', resize=True)])
    elif start_idx != 0 and last_idx < len(comments):
        keyboard.append([Button.text(f'‚¨ÖÔ∏è', resize=True),
                         Button.text(f'‚û°Ô∏è', resize=True)])
    else:
        keyboard.append([Button.text(f'‚¨ÖÔ∏è', resize=True)])
    keyboard.append([Button.text('‚èèÔ∏è–í—ã–π—Ç–∏', resize=True)])
    return keyboard


main_keyboard = [
    [Button.text('üóø–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', resize=True), Button.text('üîñ–¢–∏–ø–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', resize=True)],
]

storekeeper_keyboard = [
    [
        Button.text('üì¶–û—Ç—á–µ—Ç—ã –ø–æ —Å–∫–ª–∞–¥—É', resize=True)
    ]
]

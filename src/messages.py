from telethon import events
from src.keyboards import *


async def task_updater():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ USERSIDE
    –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    prev = datetime.now()
    while True:
        tmp = datetime.now()
        response = get_all_tasks(prev)
        prev = tmp
        if response['count'] != 0:
            for task_id in map(int, response['list'].split(',')):
                stateId = task_get_state(task_id)
                flag = True
                for divId in get_executors(task_id):
                    name = get_division(divId, name=True)['name']
                    if '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' in name:
                        flag = False
                        break
                if flag:
                    if task_id not in current_tasks and stateId != 2 and stateId != 95:
                        await new_event(task_id)
                    elif task_id not in current_tasks and stateId == 95:
                        await new_event(task_id, hide_buttons=True)
                    elif task_id in current_tasks and stateId == 2:
                        del current_tasks[task_id]
                elif task_id in current_tasks and stateId == 2:
                    del current_tasks[task_id]
        await asyncio.sleep(20)


async def trash_cleaner():
    """
    –û—á–∏—â–∞–µ—Ç –º—É—Å–æ—Ä, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–æ
    """
    while True:
        for data in trash_get(datetime.now()):
            try:
                await bot.delete_messages(data['chat_id'], data['message_id'])
            except Exception as e:
                logging.error(str(e))
            trash_delete(data['time'])
        await asyncio.sleep(60)


async def new_event(taskId, hide_buttons=False):
    """
    –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    :param taskId: ID –∑–∞–¥–∞—á–∏ –∏–∑ USERSIDE
    :param hide_buttons: —Ñ–ª–∞–≥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    """
    telegramId, txt = task_make_txt(taskId)
    try:
        if not hide_buttons:
            template = await make_main_redirect_buttons(taskId)
        else:
            template = await make_show_buttons(taskId)

        await bot.send_message(telegramId, txt, buttons=template)
        current_tasks[taskId] = TASK(taskId, new=True)
        logging.info(f'NEW TASK {taskId}')
    except Exception as e:
        logging.error(str(e))


@bot.on(events.NewMessage(outgoing=True))
async def new_outgoing_message(event):
    try:
        id = event.peer_id.user_id
    except Exception as e:
        id = event.peer_id.channel_id
    text, media = event.raw_text, event.media
    # print('FROM USERSIDE', id, text)
    # await event.delete()


@bot.on(events.NewMessage(incoming=True))
async def new_message(event):
    try:
        id = event.peer_id.user_id
        flag = True
    except Exception as e:
        try:
            id = event.peer_id.channel_id
            flag = False
        except Exception as e:
            id = event.peer_id.chat_id
            flag = False
    text, media = event.raw_text, event.media

    logging.info(f'Message|{id}: {text}')

    if '/start' == text:  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await event.delete()
        txt = '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –±–æ—Ç Trytek –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å USERSIDE'
        if id not in users:
            users[id] = USER(id, new=True)
        template = main_keyboard[::]
        if id in storekeepers:
            template += storekeeper_keyboard[::]
        await bot.send_message(id, txt, buttons=template)
        await event.delete()

    elif '/get_id' == text:  # –ø–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await event.delete()
        txt = f'ID = `{id}`'
        await bot.send_message(id, txt)

    elif 'üóø–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' == text:  # –¥–∞–Ω–Ω—ã–µ –æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await event.delete()
        txt = f'–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: {users[id].login}'
        await bot.send_message(id, txt, buttons=[Button.inline('–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω', 'new_login')])

    elif '‚èèÔ∏è–í—ã–π—Ç–∏' == text:  # –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        await event.delete()
        txt = '–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞'
        template = main_keyboard[::]
        if id in storekeepers:
            template += storekeeper_keyboard[::]
        await bot.send_message(id, txt, buttons=template)
        await users[id].comments_message.delete()
        users[id].change_comments_message(None)

    elif 'üîñ–¢–∏–ø–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' == text:  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        await event.delete()
        template = await make_comments_keyboard(users[id].startIdx)
        old = await bot.send_message(id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', buttons=template)
        users[id].change_comments_message(old)

    elif 'üì¶–û—Ç—á–µ—Ç—ã –ø–æ —Å–∫–ª–∞–¥—É' == text:  # –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–∫–ª–∞–¥—É
        await event.delete()
        txt = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥'
        template = [
            Button.inline('–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å‚ÜóÔ∏è', 'inventory'),
            Button.inline('‚ùå–û—Ç–º–µ–Ω–∞', 'stop')
        ]
        await bot.send_message(id, txt, buttons=template)

    elif '‚û°Ô∏è' == text:  # –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–ø—Ä–∞–≤–æ
        await event.delete()
        users[id].change_startIdx(+5)
        template = await make_comments_keyboard(users[id].startIdx)
        old = await bot.send_message(id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', buttons=template)
        try:
            await users[id].comments_message.delete()
        except AttributeError:
            pass
        users[id].change_comments_message(old)

    elif '‚¨ÖÔ∏è' == text:  # –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–ª–µ–≤–æ
        await event.delete()
        users[id].change_startIdx(-5)
        template = await make_comments_keyboard(users[id].startIdx)
        old = await bot.send_message(id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', buttons=template)
        try:
            await users[id].comments_message.delete()
        except AttributeError:
            pass
        users[id].change_comments_message(old)

    elif id in users and int(users[id].get_current_task()) != 0:   # –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ
        taskId = users[id].get_current_task()
        users[id].change_current_task(0)

        action = current_tasks[taskId].get_action()

        commentId = comment_add(taskId, text, users[id].jobId)

        trash_add(datetime.now(), event.original_update.message)

        name = employee_data(users[id].jobId, short_name=True)['short_name']
        if action[0] == 1:  # –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
            task_change_state(taskId, 2)
            chatId = sub_divisions[action[1]][action[2]].tgId
            del current_tasks[taskId]

            old = await bot.send_message(id, f'–ó–∞–¥–∞—á–∞ {taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
            trash_add(datetime.now(), old)

            try:
                txt = f'–ó–∞–¥–∞—á–∞ {taskId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {task_get_comment(taskId, commentId)}\n'\
                      f'–ó–∞–∫—Ä—ã–ª –∑–∞–¥–∞—á—É: {name}\n\n'\
                      f'[üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ]'\
                      f'(http://{link_url}.trytek.ru/oper/?core_section=task&action=show&id={taskId})'
                old = await bot.send_message(chatId, txt)
            except Exception:
                old = await bot.send_message(id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —á–∞—Ç')
            trash_add(datetime.now(), old)

        elif action[0] == 2:  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #TODO ERROR
            parentId, divId = action[1], action[2]

            chatId = sub_divisions[parentId][divId].tgId
            if chatId == '':
                chatId = main_divisions[parentId].tgId

            try:
                task_change_state(taskId, 1)

                template = await make_accept_buttons(taskId)

                for prevDivId in get_executors(taskId):
                    division_delete(taskId, prevDivId, users[id].jobId)
                division_add(taskId, divId, users[id].jobId)

                authorId, txt = task_make_txt(taskId, last_comment=commentId)
                await bot.send_message(chatId, txt, buttons=template)
                old = await bot.send_message(
                    id,
                    f'üü¢–ó–∞–¥–∞—á–∞ {taskId} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {sub_divisions[parentId][divId].name}'
                )
                trash_add(datetime.now(), old)
            except Exception as e:
                logging.error(str(e) + 'TODO!')
                old = await bot.send_message(
                    id, 
                    f'üî¥–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏\n'\
                    f'(chatId = {chatId}, parentId = {parentId}, divId = {divId})'
                )
                trash_add(datetime.now(), old)

    elif id in login_updaters:  # –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        await event.delete()
        if len(text.split()) != 2:
            old = await bot.send_message(id, 'üî¥–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É', buttons=[
                Button.inline('‚ùå–û—Ç–º–µ–Ω–∞', 'stop'),
            ])
        elif check_password(*text.split()):
            login_updaters.discard(id)
            login = text.split()[0]
            users[id].update_login(login)
            old = await bot.send_message(id, f'üü¢–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π login: {login}')
        else:
            login_updaters.discard(id)
            old = await bot.send_message(id, 'üî¥–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å', buttons=[
                Button.inline('üîÑ–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', 'new_login'),
                Button.inline('‚ùå–û—Ç–º–µ–Ω–∞', 'stop'),
            ])
        trash_add(datetime.now(), old)

    elif id in report_waiters:  # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ —Ç–∏–ø–∞ "1"
        await event.delete()
        divId = report_waiters[id]
        try:
            date_start, date_finish = map(lambda x: datetime.strptime(x, '%d.%m.%y'), text.split(' '))
            date_finish += timedelta(days=1)
            if date_start > date_finish:
                raise ValueError
            del report_waiters[id]

            result = make_operation_excel(divId, date_start, date_finish)
            if result == 0:
                await bot.send_file(
                    id,
                    file=main_root + 'files/record.xlsx',
                    caption=f'–§–∞–π–ª –æ—Ç {date_start.date()} –¥–æ {date_finish.date()}',
                )
            else:
                old = await bot.send_message(id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞')
                trash_add(datetime.now(), old)
        except ValueError:
            txt = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n–ü—Ä–∏–º–µ—Ä: ¬´01.01.21 01.03.21¬ª'
            old = await bot.send_message(id, txt, buttons=Button.inline('‚ùå–û—Ç–º–µ–Ω–∞', 'stop'))
            trash_add(datetime.now(), old)

    else:  # —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞
        if flag:
            await event.delete()
